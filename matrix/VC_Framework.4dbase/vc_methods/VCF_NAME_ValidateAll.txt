  //%attributes = {"invisible":true,"lang":"en"} comment added and reserved by 4D.
  // --[HEADERSTART]-------------------------------------
  // User name (OS): Joshua Fletcher
  // Date and time: 07/18/14, 10:11:59
  // ----------------------------------------------------
  // Description:
  //   Wrapper method, loop over all provided forms and
  //   validate names. Log any errors.
  // --[HEADEREND]---------------------------------------
C_POINTER($1;$formsToSave_at_p)
C_POINTER($2;$formTableNums_al_p)

C_LONGINT($0;$error_l)

C_BOOLEAN($badPathsFound_f)
C_LONGINT($currentForm_l;$currentTable_l;$numForms_l)
C_TEXT($currentFormName_t;$currentFormPOSIXPath_t)
C_OBJECT($error_o;$formMetaData_o)

C_LONGINT($progThreshold_l;$progID_l)
C_TEXT($progTitle_t)
C_REAL($progress_r)

$formsToSave_at_p:=$1
$formTableNums_al_p:=$2

$badPathsFound_f:=False

$numForms_l:=Size of array($formsToSave_at_p->)
  // Array is traveresed in reverse because I may be deleting elements.
$currentForm_l:=$numForms_l

$error_l:=VC_EXT_Open 

If ($error_l=0)
	
	If (VC_ProgInstalled_f & (<>VC_Quit_f=False))
		$progThreshold_l:=1000
		$progTitle_t:=<>VC_ComponentName_t+" Validating Form Names"
		$progID_l:=PROG_Create ($progTitle_t;$numForms_l;$progThreshold_l)
	End if 
	
	  // Loop over each form to validate the name...
	While (($currentForm_l>=1) & (($error_l=0) | ($error_l=<>WARN_ASSET_BadName_L)))
		
		$currentTable_l:=$formTableNums_al_p->{$currentForm_l}
		$currentFormName_t:=$formsToSave_at_p->{$currentForm_l}
		
		
		If (VC_ProgInstalled_f & (<>VC_Quit_f=False))
			$progress_r:=($numForms_l-$currentForm_l)/$numForms_l
			PROG_Update ($progID_l;$progress_r;($numForms_l-$currentForm_l)+1;$numForms_l;$currentFormPOSIXPath_t)
		End if 
		
		  // Validate the path.
		If (($error_l=0) | ($error_l=<>WARN_ASSET_BadName_L))
			$error_o:=VCF_NAME_Validate ($currentFormName_t;$currentTable_l)
			$error_l:=OB Get($error_o;<>VCF_KEY_ErrorCode_t)
		End if 
		
		  // Form name/path invalid, remove it from the array.
		If ($error_l=<>WARN_ASSET_BadName_L)
			$badPathsFound_f:=True  // This is a flag to let the calling method know if there were any bad paths.
			
			  // Remove the bad path from the array.
			DELETE FROM ARRAY($formsToSave_at_p->;$currentForm_l)
			
			  // Get the form metadata and log the error.
			$currentFormPOSIXPath_t:=VC_UTIL_FormGetPath ($currentFormName_t;$currentTable_l)
			$formMetaData_o:=OB Get($error_o;<>VCF_KEY_formMetaData_t)
			$error_l:=VC_LOG_InsertItem ($currentFormPOSIXPath_t;<>VC_TYPE_Form_t;$formMetaData_o)
		End if 
		
		  // Only decrement if there was no error (in case I want to refer back to where I failed).
		If (($error_l=0) | ($error_l=<>WARN_ASSET_BadName_L))
			$currentForm_l:=$currentForm_l-1
		End if 
		
	End while 
	
End if 

  // Close external database.
$error_l:=VC_EXT_Close ($error_l)

If ($badPathsFound_f)
	$error_l:=<>WARN_ASSET_BadPathsFound_l
End if 

  // <>WARN_ASSET_BadPathsFound_l is a warning.
If (($error_l#0) & ($error_l#<>WARN_ASSET_BadPathsFound_l))
	APPEND TO ARRAY(UTIL_ERR_CallChain_at;Current method name)
End if 


$0:=$error_l
